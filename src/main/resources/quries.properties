favourite.view.save=INSERT INTO favourite_view(favourite_id,report_name, is_active, group_by_period, site_key, created_by, created_time, favourite_name, project_id, user_remove_list, site_access_list, grouped_columns, category_list, filter_property, user_access_list,updated_time,updated_by)	VALUES (':favourite_id',':report_name',:is_active,':group_by_period',':site_key', ':created_by',':created_time',':favourite_name',':project_id',':user_remove_list',':site_access_list',':grouped_columns',':category_list',':filter_property',':user_access_list',':updated_time',':updated_by');
favourite.view.updateCreatedByEqualsUserId=update favourite_view set is_active=:is_active where favourite_id=:favourite_id
favourite.view.updateCreatedByNotEqualsUserIdUserAccessUpdate=update favourite_view SET user_access_list=array_remove(user_access_list,:user_id::text),is_active=:is_active where favourite_id=:favourite_id 
favourite.view.updateCreatedByNotEqualsUserIdUserRemoveUpdate=update favourite_view SET user_remove_list=:user_remove_list where favourite_id=:favourite_id
favourite.view.selectByFavouriteId=select * from favourite_view where favourite_id=':favourite_id'
favourite.order.getFavouriteOrder=select orders from favourite_order where site_key = ':site_key_value'  and created_by = ':user_id_value' and report_name in (:report_name_value)
favourite.view.categorySave=INSERT INTO favourite_view_category(favourite_id, category_list) VALUES (':favourite_id', ':category_list');
#favourite.view.getFavView.uat=select fa.updated_time as \"updatedTime\",fa.updated_by as \"updatedBy\",fa.report_name as \"reportName\",fa.favourite_id as \"favouriteId\",fa.filter_property as \"filterProperty\",fa.is_active as \"isActive\",fa.user_access_list as \"userAccessList\",fa.group_by_period as \"groupByPeriod\",fa.site_key as \"siteKey\",fa.grouped_columns as \"groupedColumns\",concat(usr.first_name,' ',usr.last_name) as \"createdBy\",fa.created_time as \"createdTime\",fa.favourite_name as \"favouriteName\",fa.site_access_list as \"siteAccessList\",fa.project_id as \"projectId\",fa.is_default as \"isDefault\",fac.category_list as \"categoryList\" ,CASE when fa.created_by = ':user_id_value' then True when usr.is_tenant_admin = 'true' then true else false END  \"isWriteAccess"\ from favourite_view fa left join user_temp usr on usr.user_id = fa.created_by left join category_mapping fac on fac.id = fa.favourite_id  where fa.report_name in (:report_name_value) and fa.filter_property is not null and fa.site_key = ':site_key_value' and fa.is_active = true and (fa.user_remove_list not like '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and (fa.created_by = ':user_id_value'--) \n or ((fa.user_access_list @> Array[':user_id_value'] or fa.user_access_list = '{All}') and   (fa.site_access_list like '%:site_key_value%' or fa.site_access_list = '["All"]'))) union all select dfview.updated_time,dfview.updated_by,dfview.report_Name,dfview.favourite_id,dfview.filter_property,dfview.is_active,dfview.user_access_list,dfview.group_by_period,dfview.site_key,dfview.grouped_columns,concat(usr.first_name,' ',usr.last_name) as \"createdBy\",dfview.created_time,dfview.favourite_name,dfview.site_access_list,dfview.project_id,dfview.is_default,'[]' as "categoryList",'false' isWriteAccess from favourite_view dfview left join user_temp usr on usr.user_id = dfview.created_by where dfview.is_default = true and dfview.site_key = ':site_key_value' and dfview.report_name in (:report_name_value) and dfview.is_active = true and dfview.filter_property not in (select fa.filter_property  from favourite_view fa where fa.report_name in (:report_name_value)  and fa.filter_property is not null and fa.site_key = ':site_key_value' and fa.is_active = true and (fa.user_remove_list not like '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and (fa.created_by = ':user_id_value'--) \n  or ((fa.user_access_list @> Array[':user_id_value'] or fa.user_access_list = '{All}') and   (fa.site_access_list like '%:site_key_value%' or fa.site_access_list = '["All"]'))))
favourite.view.getFavView=select fa.updated_time as \"updatedTime\",fa.updated_by as \"updatedBy\",fa.report_name as \"reportName\",fa.favourite_id as \"favouriteId\",fa.filter_property as \"filterProperty\",fa.is_active as \"isActive\",fa.user_access_list as \"userAccessList\",fa.group_by_period as \"groupByPeriod\",fa.site_key as \"siteKey\",fa.grouped_columns as \"groupedColumns\",concat(usr.first_name,' ',usr.last_name) as \"createdBy\",fa.created_time as \"createdTime\",fa.favourite_name as \"favouriteName\",fa.site_access_list as \"siteAccessList\",fa.project_id as \"projectId\",fa.is_default as \"isDefault\",fac.category_list as \"categoryList\" ,CASE when fa.created_by = ':user_id_value' then True when usr.is_tenant_admin = 'true' then true else false END  \"isWriteAccess"\ from favourite_view fa left join user_temp usr on usr.user_id = fa.created_by left join favorite_view_category fac on fac.favourite_id = fa.favourite_id  where fa.report_name in (:report_name_value) and fa.filter_property is not null and fa.site_key = ':site_key_value' and fa.is_active = true and (fa.user_remove_list not like '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and (fa.created_by = ':user_id_value'--) \n or ((fa.user_access_list @> Array[':user_id_value'] or fa.user_access_list = '{All}') and   (fa.site_access_list like '%:site_key_value%' or fa.site_access_list = '["All"]'))) union all select dfview.updated_time,dfview.updated_by,dfview.report_Name,dfview.favourite_id,dfview.filter_property,dfview.is_active,dfview.user_access_list,dfview.group_by_period,dfview.site_key,dfview.grouped_columns,concat(usr.first_name,' ',usr.last_name) as \"createdBy\",dfview.created_time,dfview.favourite_name,dfview.site_access_list,dfview.project_id,dfview.is_default,'[]' as "categoryList",'false' isWriteAccess from favourite_view dfview left join user_temp usr on usr.user_id = dfview.created_by where dfview.is_default = true and dfview.site_key = ':site_key_value' and dfview.report_name in (:report_name_value) and dfview.is_active = true and dfview.filter_property not in (select fa.filter_property  from favourite_view fa where fa.report_name in (:report_name_value)  and fa.filter_property is not null and fa.site_key = ':site_key_value' and fa.is_active = true and (fa.user_remove_list not like '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and (fa.created_by = ':user_id_value'--) \n  or ((fa.user_access_list @> Array[':user_id_value'] or fa.user_access_list = '{All}') and   (fa.site_access_list like '%:site_key_value%' or fa.site_access_list = '["All"]'))))
dashboard.charts.details.updateDynamicChartDetailsActiveFalseQuery=update dash_board_chart_details set is_active=:is_active where favourite_id=:favourite_id
dashboard.charts.delete=delete from dash_board_charts where favorite_view=:favourite_id and user_id=:user_id
user.getUserByUserid=select * from user_temp where user_id=':user_id'
chart.table.save=INSERT INTO chart(chart_id, chart_configuration, is_dashboard, site_key, report_name, chart_name, filter_property,chart_type, created_time, update_time, is_active, user_id, user_access_list, site_access_list) VALUES (':chart_id', ':chart_configuration'::json, :is_dashboard::boolean, ':site_key',':report_name', ':chart_name', ':filter_property'::json, ':chart_type', ':created_time', ':update_time':is_active::boolean, ':user_id', ':user_access_list', ':site_access_list');
chart.table.getChartsByUserId=select * from chart where user_id=':user_id'
chart.table.migarationReport=select chart.chart_name,chart.update_time as \"last_updated\",chart.chart_configuration -> 'tableColumns' as \"tableColumns\",chart.is_visible,chart.chart_configuration -> 'breakdown' as \"breakdown\",chart.chart_configuration -> 'column' as \"column"\,chart.chart_type as \"type\",concat(usr.first_name,' ',usr.last_name) as \"created_by\",chart.chart_configuration -> 'yaxis' as \"yaxis\",chart.chart_configuration -> 'xaxis' as \"xaxis\",chart.user_access_list as \"userAccessList\",chart.chart_id as \"chartId\",chart.chart_desc as \"chartDesc\",chart.category_list as \"categoryList\",chart.analytics_type as \"analyticsType\",chart.is_default as \"isdefault\",chart.site_access_list as \"siteAccessList\",chart.is_dashboard as \"dashboard\",chart.analytics_for as \"analyticsFor\",chart.user_id,CASE when chart.user_id = ':user_id' then True when usr.is_tenant_admin = 'true' then true else false END \"isWriteAccess"\ from chart chart left join user_temp usr on usr.user_id = chart.user_id where chart.report_name =':report_name' and chart.is_active = true and ((chart.user_id = ':user_id' or chart.user_access_list @> Array[':user_id'] or chart.user_access_list = '{All}') and (chart.site_access_list @> Array[':site_key'] or chart.site_access_list = '{All}' or chart.site_key = ':site_key')) 
category.view.getCategoryViewBySiteKey=select * from category_view where site_key=':site_key'
category.mapping.save=INSERT INTO public.category_mapping(id, category_list) VALUES (':id', ':category_list');

report.data.header=select column_name as \"displayName\", column_name as \"actualName\", data_type as \"dataType\" from report_columns where lower(report_name) = :report_name and lower(device_type) = :device_type and lower(report_by)= :report_by order by seq, column_name
report.data.numbericalHeader=select column_name from report_columns where lower(report_name) = :report_name and lower(device_type) = :device_type and lower(report_by)= :report_by and lower(data_type) = :data_type
report.data.headerFilter=select column_name from report_columns where lower(report_name) = :report_name and lower(device_type) = :device_type and lower(report_by)= :report_by order by seq, column_name
report.data.chartLayout=select chart_layout from report_user_customization where site_key = :site_key and user_id = :user_id and lower(report_name)= :report_name
report.data.reportUserCustomData=select chart_layout, columns_visible, grouped_columns from report_user_customization where site_key = :site_key and user_id = :user_id and lower(report_name)= :report_name
