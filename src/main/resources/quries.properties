favourite.view.save=INSERT INTO favourite_view(favourite_id,report_name, is_active, group_by_period, site_key, created_by, created_time, favourite_name, project_id, user_remove_list, site_access_list, grouped_columns, category_list, filter_property, user_access_list,updated_time,updated_by,report_label, is_default,os_type)	VALUES (':favourite_id',':report_name',:is_active,':group_by_period',':site_key', ':created_by',':created_time',':favourite_name',':project_id',':user_remove_list',':site_access_list',':grouped_columns',':category_list',':filter_property',':user_access_list',':updated_time',':updated_by',':report_label', :is_default,':os_type');
favourite.view.updateCreatedByEqualsUserId=update favourite_view set is_active=false where favourite_id=':favourite_id'
favourite.view.updateCreatedByNotEqualsUserIdUserAccessUpdate=update favourite_view SET user_access_list=replace(replace(replace(replace(user_access_list,':user_id',''),',,',','),'[,','['),',]',']') where favourite_id=':favourite_id'
favourite.view.updateCreatedByNotEqualsUserIdUserRemoveUpdate=update favourite_view SET user_remove_list=':user_remove_list' where favourite_id=':favourite_id'
favourite.view.selectByFavouriteId=select * from favourite_view where favourite_id=':favourite_id'
favourite.order.getFavouriteOrder=select orders from favourite_order where site_key = ':site_key_value'  and created_by = ':user_id_value' and report_name in (':report_name_value')
favourite.view.categorySave=INSERT INTO favourite_view_category(favourite_id, category_list) VALUES (':favourite_id', ':category_list');

favourite.view.getFavView=select (case when coalesce(trim(fa.report_label),'') = '' then fa.favourite_id else fa.report_label end) as \"reportLabel\",fa.updated_time as \"updatedTime\",fa.updated_by as \"updatedBy\",fa.report_name as \"reportName\",fa.favourite_id as \"favouriteId\",fa.filter_property as \"filterProperty\",fa.is_active as \"isActive\",fa.user_access_list as \"userAccessList\",fa.group_by_period as \"groupByPeriod\",fa.site_key as \"siteKey\",fa.grouped_columns as \"groupedColumns\",concat(usr.first_name,' ',usr.last_name) as \"createdBy\",fa.created_time as \"createdTime\",fa.favourite_name as \"favouriteName\",fa.site_access_list as \"siteAccessList\",fa.project_id as \"projectId\",fa.is_default as \"isDefault\",fac.category as \"categoryList\" ,CASE when fa.created_by = ':user_id_value' then True when usr.is_tenant_admin = 'true' then true when usr2.is_tenant_admin = 'true' then true else false END  \"isWriteAccess"\ from favourite_view fa left join user_temp usr on usr.user_id =fa.created_by left join user_temp usr2 on usr2.user_id =':user_id_value' left join view_category_mapping fac on fac.ID = fa.favourite_id  where  ( (lower(case when lower(fa.os_type) ilike '%mode%' then 'netapp' when lower(fa.os_type) ilike '%netapp%' then 'netapp' else fa.os_type end) in (select  CASE WHEN Lower(log_type) ilike '%mode%' THEN 'netapp' WHEN lower(log_type) ilike '%netapp%' THEN 'netapp' ELSE lower(log_type) END from  log_file_details where site_key=':site_key_value') or fa.report_name in ('project-summary','optimization')) or fa.os_type is null or fa.os_type='')   and fa.report_name in (':report_name_value') and fa.filter_property is not null and fa.is_active = true and fa.is_default != true and (fa.user_remove_list::text not ilike '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and ((fa.created_by = ':user_id_value' or fa.user_access_list::text ilike '%:user_id_value%' or fa.user_access_list = '["All"]') and (fa.site_access_list::text ilike '%:site_key_value%' or fa.site_access_list = '["All"]' or fa.site_key = ':site_key_value')) union all select (case when coalesce(trim(dfview.report_label),'') = '' then dfview.favourite_id else dfview.report_label end) as \"reportLabel\",dfview.updated_time,dfview.updated_by,dfview.report_Name,dfview.favourite_id,dfview.filter_property,dfview.is_active,dfview.user_access_list,dfview.group_by_period,dfview.site_key,dfview.grouped_columns,concat(usr.first_name,' ',usr.last_name) as \"createdBy\",dfview.created_time,dfview.favourite_name,dfview.site_access_list,dfview.project_id,dfview.is_default,'[]' as "categoryList",'false' isWriteAccess from favourite_view dfview left join user_temp usr on usr.user_id = dfview.created_by where ( ( lower(CASE WHEN Lower(dfview.os_type) ilike '%mode%' THEN 'netapp' WHEN lower(dfview.os_type) ilike '%netapp%' THEN 'netapp' ELSE dfview.os_type  END) in (select lower(( CASE WHEN Lower(log_type) ilike '%mode%' THEN 'netapp' WHEN lower(log_type) ilike '%netapp%' THEN 'netapp' ELSE lower(log_type) END)) from  log_file_details where site_key=':site_key_value')  or dfview.report_name in ('project-summary','optimization')) or dfview.os_type is null or dfview.os_type='') and dfview.is_default = true and dfview.site_key = ':site_key_value' and dfview.report_name in (':report_name_value') and dfview.is_active = true and (dfview.user_remove_list::text not ilike '%:user_id_value%' or dfview.user_remove_list is null or dfview.user_remove_list = '[]') and dfview.report_label not in (select fa.report_label  from favourite_view fa where fa.report_name in (':report_name_value')  and fa.filter_property is not null and fa.is_active = true and fa.is_default != true and (fa.user_remove_list::text not ilike '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and ((fa.created_by = ':user_id_value' or fa.user_access_list::text ilike '%:user_id_value%' or fa.user_access_list = '["All"]') and (fa.site_access_list::text ilike '%:site_key_value%' or fa.site_access_list = '["All"]' or fa.site_key = ':site_key_value')))
#favourite.view.getFavView=select fa.report_label as \"reportLabel\",fa.updated_time as \"updatedTime\",fa.updated_by as \"updatedBy\",fa.report_name as \"reportName\",fa.favourite_id as \"favouriteId\",fa.filter_property as \"filterProperty\",fa.is_active as \"isActive\",fa.user_access_list as \"userAccessList\",fa.group_by_period as \"groupByPeriod\",fa.site_key as \"siteKey\",fa.grouped_columns as \"groupedColumns\",concat(usr.first_name,' ',usr.last_name) as \"createdBy\",fa.created_time as \"createdTime\",fa.favourite_name as \"favouriteName\",fa.site_access_list as \"siteAccessList\",fa.project_id as \"projectId\",fa.is_default as \"isDefault\",fac.category as \"categoryList\" ,CASE when fa.created_by = ':user_id_value' then True when usr.is_tenant_admin = 'true' then true when usr2.is_tenant_admin = 'true' then true else false END  \"isWriteAccess"\ from favourite_view fa left join user_temp usr on usr.user_id =fa.created_by left join user_temp usr2 on usr2.user_id =':user_id_value' left join view_category_mapping fac on fac.ID = fa.favourite_id  where  ( ( lower(fa.os_type) in (select  lower(log_type) from  log_file_details where site_key=':site_key_value') or fa.report_name in ('project-summary','optimization')))  and fa.report_name in (:report_name_value) and fa.filter_property is not null and fa.is_active = true and fa.is_default != true and (fa.user_remove_list not like '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and ((fa.created_by = ':user_id_value' or fa.user_access_list @> Array[':user_id_value'] or fa.user_access_list = '{All}') and (fa.site_access_list like '%:site_key_value%' or fa.site_access_list = '["All"]' or fa.site_key = ':site_key_value')) union all select dfview.report_label as \"reportLabel\",dfview.updated_time,dfview.updated_by,dfview.report_Name,dfview.favourite_id,dfview.filter_property,dfview.is_active,dfview.user_access_list,dfview.group_by_period,dfview.site_key,dfview.grouped_columns,concat(usr.first_name,' ',usr.last_name) as \"createdBy\",dfview.created_time,dfview.favourite_name,dfview.site_access_list,dfview.project_id,dfview.is_default,'[]' as "categoryList",'false' isWriteAccess from favourite_view dfview left join user_temp usr on usr.user_id = dfview.created_by where ( ( lower(dfview.os_type) in (select lower(log_type) from  log_file_details where site_key=':site_key_value')  or dfview.report_name in ('project-summary','optimization')) or dfview.os_type is null or dfview.os_type='') and dfview.is_default = true and dfview.site_key = ':site_key_value' and dfview.report_name in (:report_name_value) and dfview.is_active = true and (dfview.user_remove_list not like '%:user_id_value%' or dfview.user_remove_list is null or dfview.user_remove_list = '[]') and dfview.report_label not in (select fa.report_label  from favourite_view fa where fa.report_name in (:report_name_value)  and fa.filter_property is not null and fa.is_active = true and fa.is_default != true and (fa.user_remove_list not like '%:user_id_value%' or fa.user_remove_list is null or fa.user_remove_list = '[]') and ((fa.created_by = ':user_id_value' or fa.user_access_list @> Array[':user_id_value'] or fa.user_access_list = '{All}') and (fa.site_access_list like '%:site_key_value%' or fa.site_access_list = '["All"]' or fa.site_key = ':site_key_value')))
dashboard.charts.details.updateDynamicChartDetailsActiveFalseQuery=update dashboard_chart_details set is_active=false where favourite_id=':favourite_id'

dashboard.charts.delete=delete from dash_board_charts where favorite_view=':favourite_id' and user_id=':user_id'
user.getUserByUserid=select * from user_temp where user_id =':user_id'
user.getUserByEmail=select * from user_temp where email =':email'
chart.table.save=INSERT INTO chart(chart_id, chart_configuration, is_dashboard, site_key, report_name, chart_name, filter_property,chart_type, created_time, update_time, is_active, user_id, user_access_list, site_access_list) VALUES (':chart_id', ':chart_configuration'::json, :is_dashboard::boolean, ':site_key',':report_name', ':chart_name', ':filter_property'::json, ':chart_type', ':created_time', ':update_time':is_active::boolean, ':user_id', ':user_access_list', ':site_access_list');
chart.table.getChartsByUserId=select * from chart where user_id=':user_id'


#chart.table.migarationReport=select chart.chart_name,chart.update_time as \"last_updated\",chart.chart_configuration -> 'tableColumns' as \"tableColumns\",chart.chart_configuration -> 'breakdown' as \"breakdown\",chart.chart_configuration -> 'column' as \"column"\,chart.chart_type as \"type\",concat(usr.first_name,' ',usr.last_name) as \"created_by\",chart.chart_configuration -> 'yaxis' as \"yaxis\",chart.chart_configuration -> 'xaxis' as \"xaxis\",chart.user_access_list as \"userAccessList\",chart.chart_id as \"chartId\",chart.chart_desc as \"chartDesc\",fac.category as \"categoryList\",chart.analytics_type as \"analyticsType\",chart.is_default as \"isdefault\",chart.site_access_list as \"siteAccessList\",chart.is_dashboard as \"dashboard\",chart.analytics_for as \"analyticsFor\",chart.user_id,CASE when chart.user_id = ':user_id' then True when usr.is_tenant_admin = 'true' then true else false END \"isWriteAccess"\,CASE  when report.user_removed_charts::text like concat('%',chart.chart_id,'%') then false else true end as \"isVisible\" from chart chart left join view_category_mapping fac on fac.ID = chart.chart_id left join user_temp usr on usr.user_id =chart.user_id   left join report_user_customization report on report.user_id=':user_id' and report.report_name=chart.report_name and report.site_key=':site_key' where chart.report_name =':report_name' and chart.is_active = true and ((chart.user_id = ':user_id' or chart.user_access_list @> ARRAY[':user_id'] or chart.user_access_list = '{All}') and (chart.site_access_list  @> ARRAY[':site_key'] or chart.site_access_list = '{All}' or chart.site_key = ':site_key'))  
chart.table.migarationReport=select chart.chart_name,chart.update_time as \"last_updated\",chart.chart_configuration -> 'tableColumns' as \"tableColumns\",chart.chart_configuration -> 'breakdown' as \"breakdown\",chart.chart_configuration -> 'column' as \"column"\,chart.chart_type as \"type\",concat(usr.first_name,' ',usr.last_name) as \"created_by\",chart.chart_configuration -> 'yaxis' as \"yaxis\",chart.chart_configuration -> 'xaxis' as \"xaxis\",chart.user_access_list as \"userAccessList\",chart.chart_id as \"chartId\",chart.chart_desc as \"chartDesc\",fac.category as \"categoryList\",chart.analytics_type as \"analyticsType\",chart.is_default as \"isdefault\",chart.site_access_list as \"siteAccessList\",chart.is_dashboard as \"dashboard\",chart.analytics_for as \"analyticsFor\",chart.user_id,CASE when chart.user_id = ':user_id' then True when usr.is_tenant_admin = 'true' then true else false END \"isWriteAccess"\,CASE  when report.user_removed_charts::text like concat('%',chart.chart_id,'%') then false else true end as \"isVisible\" from chart chart left join view_category_mapping fac on fac.ID = chart.chart_id left join user_temp usr on usr.user_id =chart.user_id   left join report_user_customization report on report.user_id=':user_id' and report.report_name=chart.report_name and report.site_key=':site_key' where chart.report_name =':report_name' and chart.is_active = true and ((chart.user_id = ':user_id' or chart.user_access_list ilike '%:user_id%' or chart.user_access_list = '["All"]') and (chart.site_access_list  ilike '%:site_key%' or chart.site_access_list = '["All"]' or chart.site_key = ':site_key'))  

category.view.getCategoryViewBySiteKey=select * from category_view where site_key=':site_key' order by category_name ASC
category.mapping.save=INSERT INTO category_mapping(id, category_list) VALUES (':id', ':category_list');
category.mapping.update=update category_mapping set category_list=':new_category_list' where category_list=':old_category_list';
category.mapping.deleteCategoryMappingFavouriteIdOrChartId=delete from category_mapping where id=':id'
category.mapping.getById=SELECT category FROM favourite_view v left join  view_category_mapping s on s.id=v.favourite_id where s.id=':id'
dashboard.getDashboardLayoutChart=select * from dashboard_user_customization duc where duc.user_id=':user_id_value' and duc.site_key=':site_key_value' 
dashboard.getDashboardLayoutChartLayout=select chart.chart_desc as \"description\",chart.report_label,chart.report_name as \"reportName\",chart.chart_name \"chartName\" ,chart.chart_id as  \"chartId\",chart.analytics_type as  \"analyticsType\",chart.analytics_for as \"analyticsFor\",chart.user_id as \"userId\",chart.filter_property::json as \"filterProperty"\,chart.is_visible as \"isVisible\" ,'' favouriteId,chart.chart_configuration from chart chart left join user_temp usr on usr.user_id = chart.user_id left join  view_category_mapping cat on cat.id = chart.chart_id left join dash_board_charts dchart on dchart.user_id = ':user_id_value' and dchart.site_key = ':site_key_value' and dchart.chart_id = chart.chart_id left join dashboard_chart_details dash on dash.chart_id=chart.chart_id and dash.site_key=':site_key_value'  where dash.chart_details is not null and chart.is_active = true and ((chart.user_id = ':user_id_value' or chart.user_access_list::text ilike '%:user_id_value%' or chart.user_access_list::text ilike '%All%') and (chart.site_access_list::text ilike '%:site_key_value%' or chart.site_access_list::text ilike '%All%' or chart.site_key = ':site_key_value')) and (((chart.is_dashboard = true and (dchart.is_active is null or dchart.is_active = true)) or dchart.is_active = true)) union all select chart.chart_desc as \"description\",dash.favorite_view,'project-summary' as report_name,case when dash.chart_id like '%donutChart' then concat('PROJECT-SUMMARY-',fc.favourite_name,'-OVERALL SUMMARY') when dash.chart_id like '%groupedBarChart' then concat('PROJECT-SUMMARY-',fc.favourite_name,'-PROJECT SUMMARY') END as chartName,dash.chart_id as chartId,'project-summary' as analyticsType,'migration' as analyticsFor,dash.user_id as userId,fc.filter_property::json as filterProperty,true as isVisible,dash.favorite_view as favouriteId,chart.chart_configuration from dash_board_charts dash left join chart chart on chart.chart_id = dash.chart_id left join favourite_view fc on dash.favorite_view = fc.favourite_id where chart.chart_id is null and dash.is_active = true and dash.user_id = ':user_id_value' and dash.site_key=':site_key_value'

dashboard.getChatForFavMenu=select chart.chart_desc as \"description\",chart.chart_type as \"type\",chart.chart_name as \"label\",chart.chart_id as \"chartId\",chart.analytics_type as \"analyticsType\",chart.analytics_for as \"analyticsFor\",chart.user_id as \"userId\",chart.filter_property as \"filterProperty\",chart.is_visible as \"isVisible\",'' favouriteId,chart.chart_configuration from chart chart left join dashboard_chart_details dcdetails on dcdetails.site_key=':site_key_value'  and dcdetails.chart_id=chart.chart_id left join user_temp usr on usr.user_id = chart.user_id left join public.view_category_mapping cat on cat.id = chart.chart_id left join dash_board_charts dchart on dchart.user_id = ':user_id_value' and dchart.site_key=':site_key_value' and dchart.chart_id = chart.chart_id where dcdetails.chart_details is not null and chart.is_active = true and ((chart.user_id = ':user_id_value' or chart.user_access_list ilike '%:user_id_value%' or chart.user_access_list = '["All"]') and (chart.site_access_list ilike '%:site_key_value%' or chart.site_access_list = '["All"]' or chart.site_key = ':site_key_value')) and chart.report_label=(select report_label from favourite_view where favourite_id=':favourite_id')

dashboard.getDashboardChartDetails=select chart_details as \"chartDetails\" from dashboard_chart_details where chart_id=':chart_id' and site_key=':site_key';
dashboard.charts.saveOrUpdateDashboardChart=INSERT INTO dash_board_charts(data_id,  site_key, favorite_view, analytics_type, category, user_id, analytics_for, chart, chart_id, is_active, created_by, created_time, updated_by, updated_time)	VALUES (':data_id', ':site_key', ':favorite_view', ':analytics_type', ':category', ':user_id', ':analytics_for', ':chart', ':chart_id',:is_active,':created_by', ':created_time', ':updated_by', ':updated_time') ON CONFLICT (site_key, user_id,chart_id) DO Update SET favorite_view=':favorite_view', analytics_type=':analytics_type',category=':category',analytics_for=':analytics_for',chart=':chart',is_active=:is_active,updated_by=':updated_by',updated_time=':updated_time';
dashboard.charts.getSiteKeyUserIdChartId=select  * from dash_board_charts where site_key=':site_key' and user_id=':user_id' and chart_id=':chart_id'
dashboard.charts.details.getByChartIdSiteKey=select * from dashboard_chart_details where site_key=':site_key' and chart_id=':chart_id'
dashboard.charts.getByChartIdSiteKeyUserId=select * from dash_board_charts where site_key=':site_key' and chart_id=':chart_id' and user_id=':user_id'
category.mapping.getCategoryLabelById=select category from view_category_mapping where id=':id'

report.data.header=select column_name as \"actualName\", alias_name as \"displayName\", data_type as \"dataType\", is_pinned as \"isPinned\" from report_columns where lower(report_name) = :report_name and lower(device_type) = :device_type and lower(report_by)= :report_by order by cast(seq as int), column_name
report.data.numbericalHeader=select distinct(column_name) from report_columns where lower(report_name) = :report_name and lower(device_type) = :device_type and lower(report_by)= :report_by and lower(data_type) = :data_type
report.data.headerFilter=select column_name from report_columns where lower(report_name) = :report_name and lower(device_type) = :device_type and lower(report_by)= :report_by order by cast(seq as int), column_name
report.data.chartLayout=select chart_layout from report_user_customization where site_key = :site_key and user_id = :user_id and lower(report_name)= :report_name
report.data.reportUserCustomData=select chart_layout, columns_visible, grouped_columns, health_check from report_user_customization where site_key= :site_key and user_id= :user_id and lower(report_name)= :report_name
report.data.reportUserCustomDataBySiteKey=select chart_layout, columns_visible, grouped_columns, health_check from report_user_customization where report_name = :site_key and user_id = :user_id
report.data.headerForCompatibility=select column_name from report_columns where lower(report_name) = :report_name and lower(device_type) = :device_type order by cast(seq as int), column_name
report.data.securityAddSourceHeader=select column_name as \"actualName\", alias_name as \"displayName\", data_type as \"dataType\", is_pinned as \"isPinned\" from ( select column_name, alias_name, data_type, false as is_pinned, seq::int as seq from report_columns where report_name = 'Discovery' and report_by = 'Privileged Access' and column_name in ('Server Name', 'User Name') union all select 'Server & User Name' as column_name, 'Server & User Name' as alias_name, 'string' as data_type, true as is_pinned, 0 as seq )a order by seq
report.data.taniumHeader=select category, actual_name as \"actualName\", display_name as \"displayName\",data_type as \"dataType\", is_pinned as \"isPinned\" from ( select 'Server Data' as category, concat('Server Data~', column_names) as actual_name, alias_name as display_name, is_pinned as is_pinned, data_type as data_type from ( select column_name as column_names, alias_name, is_pinned, data_type from report_columns where report_name = 'Discovery' and report_by = 'Privileged Access' order by seq::int ) a union all SELECT source_name  AS category, Concat(source_name, '~', display_label) AS actual_name, display_label  AS display_name, FALSE  AS is_pinned,'string'  AS data_type FROM   (SELECT source_name, created_by, display_label, read_policy, update_policy, ut.user_id, is_tenant_admin FROM   (SELECT source_name, created_by, display_label, Json_array_elements_text( ( CASE WHEN read_policy = '[]' THEN '[\"test\"]' ELSE read_policy END ) :: json) AS read_policy, Json_array_elements_text(( CASE WHEN update_policy = '[]' THEN '[\"test\"]' ELSE update_policy END ) :: json) AS update_policy FROM   (select * from ( SELECT source_name, created_by, Json_array_elements(fields :: json) ->> 'displayLabel' AS  display_label, Json_array_elements(fields :: json) ->> 'read' AS read_policy, Json_array_elements(fields :: json) ->> 'update' AS update_policy, Json_array_elements(fields :: json) ->> 'primary' AS is_primary, Json_array_elements(fields :: json) ->> 'primaryKey' AS primary_key  FROM   source WHERE  is_active = TRUE AND site_key = ':site_key')a where is_primary::boolean = false and primary_key <> 'name' and primary_key <> 'userName' and display_label <> 'Server Name' and display_label <> 'User Name')a1) a left join (SELECT user_id, is_tenant_admin, first_name, last_name, site_key, Json_array_elements_text(policy_set :: json) AS policy_set FROM   (SELECT user_id, is_tenant_admin, first_name, last_name, Json_array_elements( custom_policy :: json) ->> 'siteKey'  AS site_key, Json_array_elements( custom_policy :: json) ->> 'policset' AS policy_set FROM   user_temp WHERE user_id = ':user_id') a WHERE  is_tenant_admin = TRUE OR site_key = ':site_key') ut ON ut.policy_set = a.read_policy OR ut.policy_set = a.update_policy OR is_tenant_admin = TRUE) a WHERE  user_id IS NOT NULL  OR is_tenant_admin = TRUE OR created_by = ':user_id' )d
report.data.taniumGroup=select category, json_agg(actual_name) as grouped_columns from ( select 'Server Data' as category, concat('Server Data~', column_names) as actual_name from ( select column_name as column_names from report_columns where report_name = 'Discovery' and report_by = 'Privileged Access' ) a union all select source_name as category, concat(source_name, '~', display_label) as actual_name from (  select source_name, display_label from (  select source_name, json_array_elements(fields::json) ->> 'displayLabel' as display_label from source where is_active = true and site_key = ':site_key') a1  where display_label <> 'Server Name' and display_label <> 'User Name' )b )c group by category 
report.data.userSummaryHeader=select category, actual_name as \"actualName\", display_name as \"displayName\",data_type as \"dataType\", is_pinned as \"isPinned\" from ( select 'Server Data' as category, column_names as actual_name, alias_name as display_name, is_pinned as is_pinned, data_type as data_type from ( select column_name as column_names, alias_name, is_pinned, data_type from report_columns where device_type = 'Tanium' and report_name = 'End-To-End-Basic' and report_by = 'User' order by seq::int ) a union all SELECT source_name  AS category, Concat(source_name, '~', display_label) AS actual_name, display_label  AS display_name, FALSE  AS is_pinned,'string'  AS data_type FROM   (SELECT source_name, created_by, display_label, read_policy, update_policy, ut.user_id, is_tenant_admin FROM   (SELECT source_name, created_by, display_label, Json_array_elements_text( ( CASE WHEN read_policy = '[]' THEN '[\"test\"]' ELSE read_policy END ) :: json) AS read_policy, Json_array_elements_text(( CASE WHEN update_policy = '[]' THEN '[\"test\"]' ELSE update_policy END ) :: json) AS update_policy FROM   (select * from ( SELECT source_name, created_by, Json_array_elements(fields :: json) ->> 'displayLabel' AS  display_label, Json_array_elements(fields :: json) ->> 'read' AS read_policy, Json_array_elements(fields :: json) ->> 'update' AS update_policy, Json_array_elements(fields :: json) ->> 'primary' AS is_primary, Json_array_elements(fields :: json) ->> 'primaryKey' AS primary_key  FROM   source WHERE  is_active = TRUE AND site_key = ':site_key')a where is_primary::boolean = false and primary_key <> 'name' and primary_key <> 'userName' and display_label <> 'Server Name' and display_label <> 'User Name')a1) a left join (SELECT user_id, is_tenant_admin, first_name, last_name, site_key, Json_array_elements_text(policy_set :: json) AS policy_set FROM   (SELECT user_id, is_tenant_admin, first_name, last_name, Json_array_elements( custom_policy :: json) ->> 'siteKey'  AS site_key, Json_array_elements( custom_policy :: json) ->> 'policset' AS policy_set FROM   user_temp WHERE user_id = ':user_id') a WHERE  is_tenant_admin = TRUE OR site_key = ':site_key') ut ON ut.policy_set = a.read_policy OR ut.policy_set = a.update_policy OR is_tenant_admin = TRUE) a WHERE  user_id IS NOT NULL  OR is_tenant_admin = TRUE OR created_by = ':user_id' )d
report.data.serverSummaryHeader=select category, actual_name as \"actualName\", display_name as \"displayName\",data_type as \"dataType\", is_pinned as \"isPinned\" from ( select 'Server Data' as category, column_names as actual_name, alias_name as display_name, is_pinned as is_pinned, data_type as data_type from ( select column_name as column_names, alias_name, is_pinned, data_type from report_columns where device_type = 'Tanium' and report_name = 'End-To-End-Basic' and report_by = 'Server' order by seq::int ) a union all SELECT source_name  AS category, Concat(source_name, '~', display_label) AS actual_name, display_label  AS display_name, FALSE  AS is_pinned,'string'  AS data_type FROM   (SELECT source_name, created_by, display_label, read_policy, update_policy, ut.user_id, is_tenant_admin FROM   (SELECT source_name, created_by, display_label, Json_array_elements_text( ( CASE WHEN read_policy = '[]' THEN '[\"test\"]' ELSE read_policy END ) :: json) AS read_policy, Json_array_elements_text(( CASE WHEN update_policy = '[]' THEN '[\"test\"]' ELSE update_policy END ) :: json) AS update_policy FROM   (select * from ( SELECT source_name, created_by, Json_array_elements(fields :: json) ->> 'displayLabel' AS  display_label, Json_array_elements(fields :: json) ->> 'read' AS read_policy, Json_array_elements(fields :: json) ->> 'update' AS update_policy, Json_array_elements(fields :: json) ->> 'primary' AS is_primary, Json_array_elements(fields :: json) ->> 'primaryKey' AS primary_key  FROM   source WHERE  is_active = TRUE AND site_key = ':site_key')a where is_primary::boolean = false and primary_key <> 'name' and primary_key <> 'userName' and display_label <> 'Server Name' and display_label <> 'User Name')a1) a left join (SELECT user_id, is_tenant_admin, first_name, last_name, site_key, Json_array_elements_text(policy_set :: json) AS policy_set FROM   (SELECT user_id, is_tenant_admin, first_name, last_name, Json_array_elements( custom_policy :: json) ->> 'siteKey'  AS site_key, Json_array_elements( custom_policy :: json) ->> 'policset' AS policy_set FROM   user_temp WHERE user_id = ':user_id') a WHERE  is_tenant_admin = TRUE OR site_key = ':site_key') ut ON ut.policy_set = a.read_policy OR ut.policy_set = a.update_policy OR is_tenant_admin = TRUE) a WHERE  user_id IS NOT NULL  OR is_tenant_admin = TRUE OR created_by = ':user_id' )d